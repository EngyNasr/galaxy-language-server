{
  "name": "galaxy-tools",
  "displayName": "Galaxy Tools",
  "description": "Galaxy Tools for Visual Studio Code - provides XML completion, lints, snippets and other smart features to develop Galaxy (https://galaxyproject.org/) tool wrappers.",
  "author": "davelopez",
  "publisher": "davelopez",
  "license": "Apache-2.0",
  "version": "0.4.0",
  "preview": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/galaxyproject/galaxy-language-server"
  },
  "bugs": {
    "url": "https://github.com/galaxyproject/galaxy-language-server/issues"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Snippets",
    "Formatters",
    "Other"
  ],
  "icon": "media/galaxy-tools-icon.png",
  "engines": {
    "vscode": "^1.34.0"
  },
  "activationEvents": [
    "onLanguage:galaxytool"
  ],
  "contributes": {
    "languages": [
      {
        "id": "galaxytool",
        "firstLine": "^<tool",
        "extensions": [
          ".xml"
        ],
        "aliases": [
          "Galaxy Tool Wrapper"
        ],
        "configuration": "./src/languages/galaxytoolxml.language-configuration.json"
      },
      {
        "id": "cheetah",
        "extensions": [
          ".tmpl"
        ],
        "configuration": "./src/languages/cheetah.language-configuration.json"
      },
      {
        "id": "restructuredtext",
        "extensions": [
          ".rst"
        ],
        "configuration": "./src/languages/restructuredtext.language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "galaxytool",
        "scopeName": "text.xml.galaxytool",
        "path": "./src/syntaxes/galaxytoolxml.tmLanguage.json",
        "embeddedLanguages": {
          "meta.embedded.block.cheetah": "cheetah",
          "meta.embedded.block.restructuredtext": "restructuredtext"
        }
      },
      {
        "language": "cheetah",
        "scopeName": "source.cheetah",
        "path": "./src/syntaxes/cheetah.tmLanguage.json"
      },
      {
        "language": "restructuredtext",
        "scopeName": "text.restructuredtext",
        "path": "./src/syntaxes/restructuredtext.tmLanguage.json"
      },
      {
        "path": "./src/syntaxes/token.injection.json",
        "scopeName": "token.injection",
        "injectTo": [
          "text.xml.galaxytool",
          "source.cheetah",
          "text.restructuredtext"
        ]
      }
    ],
    "commands": [
      {
        "command": "galaxytools.generate.tests",
        "title": "Generate tests cases for current tool",
        "category": "Galaxy Tools"
      },
      {
        "command": "galaxytools.generate.command",
        "title": "Generate boilerplate command section for current tool",
        "category": "Galaxy Tools"
      },
      {
        "command": "galaxytools.sort.singleParamAttributes",
        "title": "Sort the attributes of the param element under the cursor according to the IUC Coding Style Guide.",
        "category": "Galaxy Tools"
      },
      {
        "command": "galaxytools.sort.documentParamsAttributes",
        "title": "Sort the attributes of all the param elements in the document according to the IUC Coding Style Guidelines.",
        "category": "Galaxy Tools"
      },
      {
        "command": "galaxytools.planemo.openSettings",
        "title": "Displays the configuration settings for `planemo`.",
        "category": "Galaxy Tools: Planemo"
      }
    ],
    "keybindings": [
      {
        "command": "galaxytools.generate.tests",
        "key": "ctrl+alt+t",
        "mac": "cmd+alt+t"
      },
      {
        "command": "galaxytools.generate.command",
        "key": "ctrl+alt+c",
        "mac": "cmd+alt+c"
      },
      {
        "command": "galaxytools.sort.singleParamAttributes",
        "key": "ctrl+alt+s ctrl+alt+p",
        "mac": "cmd+alt+s cmd+alt+p"
      },
      {
        "command": "galaxytools.sort.documentParamsAttributes",
        "key": "ctrl+alt+s ctrl+alt+d",
        "mac": "cmd+alt+s cmd+alt+d"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Galaxy Tools",
      "properties": {
        "galaxyTools.completion.mode": {
          "scope": "resource",
          "type": "string",
          "description": "Controls the auto-completion suggestions.",
          "enum": [
            "auto",
            "invoke",
            "disabled"
          ],
          "markdownEnumDescriptions": [
            "The appropriate name of elements and attributes, depending on the context, will be automatically suggested as you type.",
            "The suggestions will appear only if you explicitly invoke them using the `trigger suggest shortcut` (usually `Ctrl + space`).",
            "No suggestions will be shown."
          ],
          "default": "auto"
        },
        "galaxyTools.completion.autoCloseTags": {
          "scope": "resource",
          "type": "boolean",
          "markdownDescription": "Controls whether to auto-insert the closing tag after typing `>` or `/`.",
          "default": "true"
        },
        "galaxyTools.planemo.enabled": {
          "scope": "resource",
          "type": "boolean",
          "markdownDescription": "**[Experimental]** When enabled, you can use some of the `planemo` features directly from your editor. Please set `#galaxyTools.planemo.envPath#` to be able to use `planemo`.",
          "default": true
        },
        "galaxyTools.planemo.envPath": {
          "scope": "resource",
          "type": "string",
          "markdownDescription": "If `planemo` is not on PATH you will have to provide here the full path to the `Python virtual environment` where `planemo` is installed. The path must end with `planemo` and be something like `/<full-path-to-virtual-env>/bin/planemo`.\n\n**This is required** to be able to use `planemo` features.",
          "default": "planemo"
        },
        "galaxyTools.planemo.galaxyRoot": {
          "scope": "resource",
          "type": "string",
          "markdownDescription": "The full path to the *Galaxy root directory* that will be used by `planemo`. This value will be passed to `planemo` as the parameter to `--galaxy_root`.\n\n**This is required** to be able to use *some* `planemo` features that need a `running Galaxy instance`.",
          "default": null
        },
        "galaxyTools.planemo.testing.enabled": {
          "scope": "resource",
          "type": "boolean",
          "markdownDescription": "Whether to discover and run tests using `planemo` inside the editor Test Explorer.",
          "default": true
        },
        "galaxyTools.planemo.testing.autoTestDiscoverOnSaveEnabled": {
          "scope": "resource",
          "type": "boolean",
          "markdownDescription": "Whether to try to discover new tests when a Galaxy Tool Wrapper file is saved.",
          "default": true
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "planemo-explorer",
          "title": "Galaxy Tools: Planemo",
          "icon": "resources/planemo.svg"
        }
      ]
    },
    "views": {
      "planemo-explorer": [
        {
          "id": "planemo-config",
          "name": "Configuration",
          "when": "config.galaxyTools.planemo.enabled"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "planemo-config",
        "contents": "Welcome!\nThe planemo integration with Galaxy Tools is currently in the **EXPERIMENTAL** phase. If you find any problems or want to suggest improvements please [fill an issue here](https://github.com/galaxyproject/galaxy-language-server/issues).\nIn order to use this feature you need to have planemo installed in a virtual environment and a Galaxy repo. You can find more information about installing planemo in the [planemo docs](https://planemo.readthedocs.io/en/latest/).\nTo get started...\n[Open the Planemo Settings](command:galaxytools.planemo.openSettings)\nand provide the path settings (marked as required)."
      }
    ],
    "snippets": [
      {
        "language": "galaxytool",
        "path": "./src/snippets.json"
      }
    ]
  },
  "main": "./out/extension",
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "lint": "eslint . --ext .ts,.tsx",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/node": "^14.14.25",
    "@types/tmp": "^0.2.0",
    "@types/vscode": "^1.53.0",
    "@typescript-eslint/eslint-plugin": "^4.14.2",
    "@typescript-eslint/parser": "^4.14.2",
    "eslint": "^7.19.0",
    "typescript": "^4.1.3"
  },
  "dependencies": {
    "iconv-lite": "^0.6.2",
    "lookpath": "^1.1.0",
    "tmp": "^0.2.1",
    "vscode-languageclient": "^6.1.3",
    "vscode-test-adapter-api": "^1.9.0",
    "vscode-test-adapter-util": "^0.7.1"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ]
}
